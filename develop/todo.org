* test 
** module authors [16/51]
  + [X] Auxiliary.Decorators:  Fabian  
  + [X] Auxiliary.Entropy: Fabian  
  + [ ] Auxiliary.ImageUtils  : Philipp 
  + [X] Auxiliary.LpNestedFunction  : Fabian  
  + [ ] Auxiliary.Numerics  : Philipp
  + [ ] Auxiliary.Optimization  : Philipp  
  + [X] Auxiliary.Plotting  : Fabian, Philipp  
  + [X] Auxiliary.Utils  : Fabian, Sebastian
  + [X] DataModule.DataLoader  : Fabian, Philipp  
  + [X] DataModule.Data  : Fabian  
  + [X] DataModule.DataSampler :  Philipp, Fabian  
  + [X] Logging.ExperimentLog : Fabian
  + [X] Logging.LogTokens : Fabian
  + [X] Transforms.LinearTransformFactory  : Fabian,  Philipp  
  + [X] Transforms.LinearTransform  : Fabian, Philipp  
  + [X] Transforms.NonlinearTransformFactory  : Fabian  
  + [X] Transforms.NonlinearTransform  : Fabian  
  + [X] Transforms  : Fabian, Philipp  
  + [X] Transforms.Transform 
* Buglist
  Dependencies to other libraries, need to be mentioned somewhere, this includes
  + [ ] scipy version >0.9 is needed, logsumexp is moved to misc
  + [ ] numpy version bigger than 1.4 is needed because of something i dont remember
** Distributions which fail the generic tests:
   All are tested with `nosetests TestDistributions.py`, reported here are the
   corresponding config dictionaries in config_dictionaries.py which lead to a
   failure or error.
   Files to look at are: config_dictionaries.py in /Tests and /Tests/TestDistributions.py
   We might want to not test some of the distributions, so far I just added all
   of the distributions in /distributions/ and tested them (with the proper
   support given).
   so far: 231 Test , 34 errors, 40 fail, 157 pass
   
*** Sebastian   
    + [ ] Test output of Lpspherically symmetric

    + [ ] ISA :no default distribution, this should have one, I think
	  {'dist'      :ISA,
          'tolerance':1e-01}
      --> has a default distribution now. however, throws testing errors.
    + [ ] can't we exlucde certain tests for a distribution?
    + [ ] PCauchy (sampling not implemented)
	  {'dist'      :PCauchy,
          'tolerance':1e-01}
      --> has now a sampling method, but throws a lot of testing bugs.
    + [ ] LpNestedSymmetric, too many indices error in the gradient calc, also primary2array
	  {'dist'      :LpNestedSymmetric,
          'tolerance':1e-01}
      --> has primary to array now; don't understand the index thing
    + [ ] LpSphericallySymmetric, array2primary and primary2array has to be
          implemented; maybe change it in the distribution itself, have already
          updated it to be able to handle array parameters.
	  {'dist'      :LpSphericallySymmetric,
          'tolerance':1e-01}
      --> has primary to array now; throws testing errors
    + [ ] ProductOfExponentialPowerDistributions
	  {'dist'      :ProductOfExponentialPowerDistributions,
          'tolerance':1e-01}
      --> throws testing errors that don't seem to be my problem
    + [ ] TruncatedExponentialPower (This is actually a bug in TestDistributions,
	  as right now the support for test-generators canot be set to (a,inf) only
	  (0,inf) is supported.
	  {'dist'      :TruncatedExponentialPower,
          'support':(0,np.inf),
          'tolerance':1e-01}
    + [ ] Fabian TestLpGeneralizedNormal.py
	  /usr/local/lib/python2.6/dist-packages/scipy/io/matlab/mio.py:74: DeprecationWarning: Searching for mat files on python system path will be removed in next version of scipy
	  full_name = find_mat_file(file_like, appendmat)
	  EE
	  ERROR: test_estimate (TestLpGeneralizedNormal.TestLpGeneralizedNormal)
	  Traceback (most recent call last):
	  No such file or directory: '/home/sgerwinn/projects/natter/Tests/Tests/TestPGeneralizedNormal0.mat'
     
      --> test runs smoothly for me. I added all the mat files.
    + [ ] Fabian TestLpSphericallySymmetric.py
	  No such file or directory: '/home/sgerwinn/projects/natter/Tests/Tests/TestPSphericallySymmetric0.mat'
      --> added the mat files to git. However, we still have problems
      with the LpSphericallySymmetric test; see above.
    + [ ] Fabian TestMixtureOfLogNormals.py
	  test_derivatives (TestMixtureOfLogNormals.TestMixtureOfLogNormals)
	  self.assertFalse(np.mean(np.abs(df-df2)) > tol, Auxiliary.prettyPrintDict(prot))
	  AssertionError: mean diff: 0.0213352727889
	  message: Difference in derivative of log-likelihood for MixtureOfLogNormals greater than 0.0001
	  max diff: 1.20377653639

      --> runs smoothly for me. Can you test again?

*** Fabian
    + [X] Dirichlet: with config-dictionary (not aligned, probably because of
          data dimensionality)
	  {'dist':Dirichlet,
	  'support'  :(0,1),
      'tolerance':1e-01} 

      --> removed from tests. Sampling distribution is more difficult
      in the generic test since it is multivariate and produces
      normalized samples. Dirichlet has an extratest. 
    + [X] CompleteLinearModel: no default distribution, more specifically, there
          is a default distribution, but W and q are None, which results in a None-distribution.
	  {'dist'      :CompleteLinearModel,
          'tolerance':1e-01}

          --> removed from test since I don't think there should be a
      default parameter. 
    + [X] FiniteMixtureDistribution, has no default distribution, maybe set it
          to Gaussian? Specialized Test function for this distribution passes though.
	  {'dist'      :FiniteMixtureDistribution,
          'tolerance':1e-01}
    + [X] Histrogram, some functions are not defined, such as loglik,
          primary2array also does not work. Although I'm not sure, if we want to
          keep it tested...
	  {'dist'      :Histogram,
          'tolerance':1e-01}

      --> removed from test as suggested
    + [X] MixtureOfGaussians,
	  {'dist'      :MixtureOfGaussians,
          'tolerance':1e-01}
    + [X] MixtureOfLogNormals,
	  {'dist'      :MixtureOfLogNormals,
          'support': (0,np.inf),
          'tolerance':1e-01}
    + [X] SchwwartzSimoncelliModel (no sampling)
	  {'dist'      :SchwartzSimoncelliModel,
          'tolerance':1e-01}	 
      --> removed from natter 'coz it's not a probabilistic model anyway
    + [X] TmodelRaidal: no sampling method
	  {'dist'      :TModelRadial,
          'support': (0,np.inf),
          'tolerance':1e-01}	 
      --> removed from testing
    + [X] Transformed (no default distribution)- maybe to explude
	  {'dist'      :Transformed,
          'tolerance':1e-01}
      --> removed
    + [X] Truncated (no default) - maybe to excluded
	  {'dist'      :Truncated,
          'tolerance':1e-01}
      --> removed
    + [X] Uniform (NotImplementedError instead of AbstractError)
